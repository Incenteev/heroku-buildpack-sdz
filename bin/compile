#!/usr/bin/env bash

###################################################################
#                    SdZ Heroku Buildpack                         #
#                                                                 #
#        Authors: Sylvain Mauduit <sylvain.mauduit@simple-it.fr>  #
#                 Kevin Letord <kevin.letord@simple-it.fr>        #
#                                                                 #
###################################################################

# bin/compile <build-dir> <cache-dir>


# ----START CONFIG-----------------------------------------------------

# ----Amazon S3----
S3_BUCKET="simpleit-heroku-builds"

# ----Heroku Packages----
NGINX_VERSION=1.0.11
NGINX_URL="https://${S3_BUCKET}.s3.amazonaws.com/nginx-${NGINX_VERSION}-heroku.tar.gz"
NGINX_PATH="vendor/nginx"

PHP_VERSION=5.3.9
PHP_URL="https://${S3_BUCKET}.s3.amazonaws.com/php-${PHP_VERSION}-with-fpm-heroku.tar.gz"
PHP_PATH="vendor/php"

NODE_VERSION="0.6.10"
NODE_URL="https://${S3_BUCKET}.s3.amazonaws.com/node-${NODE_VERSION}-heroku.tar.gz"
NODE_PATH="vendor/node"
NPM_VERSION="1.0.94"

SCONS_VERSION="1.2.0"
SCONS_URL="https://${S3_BUCKET}.s3.amazonaws.com/scons-${SCONS_VERSION}-heroku.tar.gz"

# ----Local folders----
BUILD_DIR=$1
CACHE_DIR=$2
BIN_DIR=$(dirname $0)
LP_DIR=`cd $(dirname $0); cd ..; pwd`


# ----FUNCTIONS---------------------------------------------------------

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

mktmpdir() {
  dir=$(mktemp -t $1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

run_npm() {
  command="$1"
  module="$2"
  HOME="$BUILD_DIR" $BUILD_DIR/$NODE_PATH/bin/npm $command $module 2>&1 | indent

  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to $command dependencies with npm"
    exit 1
  fi  
}

# ----PRE-INSTALL ACTIONS-----------------------------------------------

echo "-----> SdZ Heroku Buildpack: Slug compilation start"

# fail fast
set -e
set -o pipefail

mkdir -p $BUILD_DIR $CACHE_DIR

cd $BUILD_DIR

echo "-----> Move application files into 'www' folder"
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep conf folder
if [ -d www/conf ]; then
  mv www/conf .
fi

# keep Node.js dependency file
if [ -f www/package.json ]; then
  mv www/package.json .
fi

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

# unpack cache
if [ ! -d vendor ]; then
  mkdir vendor
fi

###TODO###
# Use cache if no change of version of the vendors

#for DIR in $NGINX_PATH $PHP_PATH ; do
#  rm -rf $DIR
#  if [ -d $CACHE_DIR/$DIR ]; then
#    cp -r $CACHE_DIR/$DIR $DIR
#  fi  
#done

# ----INSTALL SERVICES-----------------------------------------------------
# ----Nginx------------------------------
echo "-----> Installing Nginx"
cd ${BUILD_DIR}
if [ ! -d $NGINX_PATH ]; then
  echo "---------> Bundling Nginx v${NGINX_VERSION}"
  mkdir -p $NGINX_PATH && cd $NGINX_PATH
  curl --silent --max-time 60 --location $NGINX_URL | tar xz
fi
echo "---------> Moving conf files to vendor directory"
cd ${BUILD_DIR}
erb conf/nginx.conf.erb > $NGINX_PATH/conf/nginx.conf

# ----PHP--------------------------------
echo "-----> Installing PHP"
cd ${BUILD_DIR}
if [ ! -d $PHP_PATH ]; then
  echo "---------> Bundling PHP v${PHP_VERSION}"
  mkdir -p $PHP_PATH && cd $PHP_PATH
  curl --silent --max-time 300 --location $PHP_URL | tar xz
fi
echo "---------> Moving conf files to vendor directory"
cd ${BUILD_DIR}
cp conf/php-fpm.conf $PHP_PATH/etc/php-fmp.conf
cp conf/php.ini $PHP_PATH/php.ini

# ----Node--------------------------------
echo "-----> Installing Node"
cd ${BUILD_DIR}

if [ ! -d $NODE_PATH ]; then
  echo "---------> Bundling Node v${NODE_VERSION}"
  mkdir -p $NODE_PATH && cd $NODE_PATH
  curl --silent --max-time 90 --location $NODE_URL | tar xz
  cd ..
  
  VENDORED_SCONS="$(mktmpdir scons)"
  cd $VENDORED_SCONS
  curl --silent --max-time 90 --location $SCONS_URL | tar xz

  PATH="$VENDORED_SCONS:${BUILD_DIR}/$NODE_PATH/bin:$PATH"
  INCLUDE_PATH="${BUILD_DIR}/$NODE_PATH/include"
  export CPATH="$INCLUDE_PATH"
  export CPPPATH="$INCLUDE_PATH"

  CACHE_STORE_DIR="$CACHE_DIR/node_modules/$NPM_VERSION"
  CACHE_TARGET_DIR="$BUILD_DIR/node_modules"

  # unpack existing cache
  if [ -d $CACHE_STORE_DIR ]; then
  
    # generate a place to put node_modules
    TEMP_NODE_MODULES_DIR=$(mktmpdir node_modules)
  
    # move existing node_modules out of the way
    if [ -d $CACHE_TARGET_DIR ]; then
      mv $CACHE_TARGET_DIR $TEMP_NODE_MODULES_DIR/
    fi  
  
    # copy the cached node_modules in
    mkdir -p $CACHE_TARGET_DIR
    cp -R $CACHE_STORE_DIR/* $CACHE_TARGET_DIR/
  
    # move existing node_modules back into place
    if [ -d $TEMP_NODE_MODULES_DIR/node_modules ]; then
      cp -R $TEMP_NODE_MODULES_DIR/node_modules/* $CACHE_TARGET_DIR/
    fi
  fi

  # install dependencies with npm
  echo "---------> Installing dependencies with npm $NPM_VERSION"
  
  cd $BUILD_DIR
  run_npm install less
  run_npm rebuild less
  
  echo "---------> Dependencies installed" | indent
  
  # repack cache with new assets
  if [ -d $CACHE_TARGET_DIR ]; then
    rm -rf $CACHE_STORE_DIR
    mkdir -p $(dirname $CACHE_STORE_DIR)
    cp -a $CACHE_TARGET_DIR $CACHE_STORE_DIR
  fi
fi

# ----END INSTALL SERVICES-------------------------------------------------


# ----INSTALL APPLICATION--------------------------------------------------
cd $BUILD_DIR

echo "-----> Installing Sf2 application"

echo "---------> Moving app conf files to Sf2 configuration directory"
cp conf/parameters.ini www/app/config/parameters.ini

###TODO### Fix issue with bin/vendor install script
#echo "---------> Install Sf2 vendors"
#${PHP_PATH}/bin/php www/bin/vendors install
#find www/vendor -name .git -type d | xargs rm -rf

echo "---------> Install Sf2 assets"
###FIXME### Change 'dev' environement to 'prod'
${PHP_PATH}/bin/php www/app/console assets:install www/web --env=dev


# ----BOOT SCRIPT----------------------------------------------------------

echo "-----> Installing boot script"

cat >>boot.sh <<EOF
#!/usr/bin/env bash

export PATH=/app/vendor/nginx/sbin:/app/vendor/php/bin:/app/vendor/php/sbin:/usr/local/bin:/usr/bin:/bin:$PATH

echo "---- SdZ Heroku boot Script ----"

echo "--> Copy parameters.ini file into Sf2 app config folder"
cp /app/conf/parameters.ini /app/www/app/config/parameters.ini

echo "--> Copy PHP & Nginx conf files into vendors directory"
cp /app/conf/php-fpm.conf /app/vendor/php/etc/php-fpm.conf
cp /app/vendor/php/share/php/fpm/status.html /app/status.html
cp /app/conf/php.ini /app/vendor/php/php.ini
erb /app/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

echo "--> Linking Sf2 cache dir to /tmp folder"
if [ -d /app/www/app/cache ]; then
    rm -rf /app/www/app/cache
fi
if [ -d /tmp/sf-cache ]; then
    rm -rf /tmp/sf-cache
fi
mkdir /tmp/sf-cache
ln -s /tmp/sf-cache /app/www/app/cache

echo "--> Enabled Sf2 logging system"
touch /app/www/app/logs/prod.log /app/www/app/logs/dev.log
tail -F -n 0 /app/www/app/logs/prod.log &
tail -F -n 0 /app/www/app/logs/dev.log &

echo "--> Enabled Nginx logging system"
touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
tail -F -n 0 /app/vendor/nginx/logs/access.log &
tail -F -n 0 /app/vendor/nginx/logs/error.log &

echo "--> Enabled PHP-FPM logging system"
mkdir /app/vendor/php/log/
touch /app/vendor/php/log/php-fpm.log
tail -F -n 0 /app/vendor/php/log/php-fpm.log &

echo "--> Booting PHP-FPM & Nginx"
php-fpm
nginx

echo "--> Done!"
EOF
chmod +x boot.sh
# ----END BOOT SCRIPT------------------------------------------------------

echo "-----> Slug compilation ends with success!"
