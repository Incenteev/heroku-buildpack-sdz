#!/usr/bin/env bash

###################################################################
#                    SdZ Heroku Buildpack                         #
#                                                                 #
#        Authors: Sylvain Mauduit <sylvain.mauduit@simple-it.fr>  #
#                 Kevin Letord <kevin.letord@simple-it.fr>        #
#                                                                 #
###################################################################

# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
set -o pipefail

export SF_ENV="prod"

# ----START CONFIG-----------------------------------------------------

# ----Amazon S3----
S3_BUCKET="incenteev-heroku-builds"

# ----Heroku Packages----
NGINX_VERSION=1.0.11
NGINX_URL="https://${S3_BUCKET}.s3.amazonaws.com/nginx-${NGINX_VERSION}-heroku.tar.gz"
NGINX_PATH="vendor/nginx"

PHP_VERSION=5.4.15
PHP_URL="https://${S3_BUCKET}.s3.amazonaws.com/php-${PHP_VERSION}-with-fpm-sundown-heroku.tar.gz"
PHP_PATH="vendor/php"

# ----Local folders----
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BIN_DIR=$(dirname $0)
LP_DIR=`cd $(dirname $0); cd ..; pwd`


# ----FUNCTIONS---------------------------------------------------------

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function strip_slashes() {
  echo $(echo "$1" | sed -e "s/\//\\\\\//g")
}

# Exporting Heroku environment variables during the compilation
# code is taken from https://devcenter.heroku.com/articles/buildpack-api-staging?preview=1#bin-compile
export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH|LD_LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# ----PRE-INSTALL ACTIONS-----------------------------------------------

echo "-----> Incenteev Heroku Buildpack: Slug compilation start"

mkdir -p $BUILD_DIR $CACHE_DIR

cd $BUILD_DIR

echo "-----> Move application files into 'www' folder"
mkdir -p $CACHE_DIR/tmp
mv * $CACHE_DIR/tmp
mv $CACHE_DIR/tmp www

# keep conf folder
if [ -d www/app/heroku ]; then
    if [ -d www/app/heroku/${SF_ENV}/conf ]; then
        cp -R www/app/heroku/${SF_ENV}/conf .
    else
        echo "---------> No Heroku conf folder found for Sf env '${SF_ENV}'. Abording..."
        exit 1
    fi
    rm -rf www/app/heroku
fi

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

# unpack cache
if [ ! -d vendor ]; then
  mkdir vendor
fi

# ----INSTALL SERVICES-----------------------------------------------------
# ----Nginx------------------------------
echo "-----> Installing Nginx"
cd ${BUILD_DIR}
if [ ! -d $NGINX_PATH ]; then
  echo "---------> Bundling Nginx v${NGINX_VERSION}"
  mkdir -p $NGINX_PATH && cd $NGINX_PATH
  curl --silent --max-time 500 --location $NGINX_URL | tar xz
fi
echo "---------> Moving conf files to vendor directory"
cd ${BUILD_DIR}
erb conf/nginx.conf.erb > $NGINX_PATH/conf/nginx.conf

# ----PHP--------------------------------
echo "-----> Installing PHP"
cd ${BUILD_DIR}
if [ ! -d $PHP_PATH ]; then
  echo "---------> Bundling PHP v${PHP_VERSION}"
  mkdir -p $PHP_PATH && cd $PHP_PATH
  curl --silent --max-time 500 --location $PHP_URL | tar xz
fi
echo "---------> Moving conf files to vendor directory"
cd ${BUILD_DIR}
cp conf/php-fpm.conf $PHP_PATH/etc/php-fpm.conf
cp conf/php.ini $PHP_PATH/php.ini

echo "------------> Moving ext files to php ext directory"
cd ${BUILD_DIR}
if [ ! -d $PHP_PATH/ext ]; then
  mkdir $PHP_PATH/ext
fi
cp ${PHP_PATH}/lib/php/extensions/no-debug-non-zts-20100525/sundown.so $PHP_PATH/ext/

echo "------------> Adding the sundown extension in the conf"
cd ${BUILD_DIR}
echo "extension_dir=/app/${PHP_PATH}/ext" >> $PHP_PATH/php.ini
echo "extension=sundown.so" >> $PHP_PATH/php.ini


# ----END INSTALL SERVICES-------------------------------------------------


# ----INSTALL APPLICATION--------------------------------------------------
cd $BUILD_DIR

echo "-----> Installing Sf2 application"


# This is clearly a hack but it allows PHP to find its php.ini
echo "---------> Adding a php.ini in /app/vendor/php (hacky but needed)"
if [ -f /app/vendor/php/php.ini ]; then
    echo "---------> A php.ini already exists in /app/vendor/php so cannot apply the hack for our conf"
    exit 1
fi;

if [ ! -d /app/vendor/php ]; then
    mkdir -p /app/vendor/php
fi

cp conf/php.ini /app/vendor/php/php.ini
echo "extension_dir=${BUILD_DIR}/${PHP_PATH}/ext" >> /app/vendor/php/php.ini
echo "extension=sundown.so" >> /app/vendor/php/php.ini

# We need this to use PHP in Sf2 task when building assets...
export LD_LIBRARY_PATH=${BUILD_DIR}/${PHP_PATH}/icu/lib:${BUILD_DIR}/${PHP_PATH}/ext:${LD_LIBRARY_PATH}
export PATH=${BUILD_DIR}/${PHP_PATH}/bin:$PATH


echo "---------> Setting additional environment variables"
export_env_dir $ENV_DIR
export HEROKU_ASSETS_VERSION=$(date +%Y%m%d%H%M)
read HEROKU_DATABASE_USER HEROKU_DATABASE_PASSWORD HEROKU_DATABASE_HOST HEROKU_DATABASE_DB HEROKU_DATABASE_PORT << HERE
    $(echo "<?php \$parts = parse_url(getenv('DATABASE_URL')); \$user = isset(\$parts['user']) ? '\\'' . \$parts['user'] . '\\'' : 'null'; \$pass = isset(\$parts['pass']) ? '\\'' . \$parts['pass'] . '\\'' : 'null'; \$host = isset(\$parts['host']) ? '\\'' . \$parts['host'] . '\\'' : 'null'; \$db = isset(\$parts['path']) ? '\\'' . substr(\$parts['path'], 1) . '\\'' : 'null'; \$port = isset(\$parts['port']) ? \$parts['port'] : 'null'; printf('%s %s %s %s %s', \$user, \$pass, \$host, \$db, \$port);" | php)
HERE
export HEROKU_DATABASE_USER HEROKU_DATABASE_PASSWORD HEROKU_DATABASE_HOST HEROKU_DATABASE_DB HEROKU_DATABASE_PORT

# check if we have Composer dependencies and vendors are not bundled
if [ -f www/composer.json ]; then
    echo "---------> Installing Composer dependencies"

    CACHE_STORE_DIR="${CACHE_DIR}/www/vendor"
    CACHE_TARGET_DIR="${BUILD_DIR}/www/vendor"

    if [ -d $CACHE_TARGET_DIR ]; then
        rm -rf $CACHE_TARGET_DIR
    fi

    if [ -d $CACHE_STORE_DIR ] && [ -z "$REBUILD_COMPOSER_CACHE"  ]; then
        echo "-------------> Copying the cached Composer dependencies"
        cp -r $CACHE_STORE_DIR $CACHE_TARGET_DIR
    fi

  GIT_DIR_ORIG=$GIT_DIR
  unset GIT_DIR
  echo "-------------> Installing the uptodate dependencies"
  COMPOSER_URL="http://getcomposer.org/composer.phar"
  curl --silent --max-time 60 --location "$COMPOSER_URL" > www/composer.phar
  cd www
  php composer.phar install --prefer-source --optimize-autoloader --no-interaction --no-dev
  cd $BUILD_DIR

    if [ -d $CACHE_TARGET_DIR ]; then
        echo "-------------> Caching the Composer dependencies"
        rm -rf $CACHE_STORE_DIR
        mkdir -p $(dirname $CACHE_STORE_DIR)
        cp -a $CACHE_TARGET_DIR $CACHE_STORE_DIR
    fi

  echo "-------------> Delete composer.phar script"
  rm www/composer.phar

  export GIT_DIR=$GIT_DIR_ORIG
fi

# Delete sub '.git' folders for each vendor
if [ -d www/vendor ]; then
    find www/vendor -name .git -type d | xargs rm -rf
fi

# Sets the debug flag depending on Sf2 env (declared at the beginning of the file)
SF_DEBUG="--no-debug"

# Deploying assets
echo "---------> Dumping Assetic assets"
php www/app/console assets:install www/web --env=${SF_ENV} --no-interaction
php www/app/console assetic:dump ${SF_DEBUG} --env=${SF_ENV} --no-interaction

rm -f /app/vendor/php/php.ini

# The cache cannot be kept as it contains some absolute path using the temp folder
echo "---------> Removing the cache"
rm -rf ${BUILD_DIR}/www/app/cache/*

# ----BOOT SCRIPT----------------------------------------------------------

echo "-----> Installing boot script"

cat >>sf <<EOF
#!/usr/bin/env bash
/app/vendor/php/bin/php /app/www/app/console \$@
EOF
chmod +x sf

cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "--> Copy PHP & Nginx conf files into vendors directory"
cp /app/vendor/php/share/php/fpm/status.html /app/status.html
erb /app/conf/nginx.conf.erb > /app/vendor/nginx/conf/nginx.conf

if [ -d /app/www/app/cache ]; then
    rm -rf /app/www/app/cache
fi
if [ -d /tmp/sf-cache ]; then
    rm -rf /tmp/sf-cache
fi
mkdir /tmp/sf-cache
ln -s /tmp/sf-cache /app/www/app/cache

echo "--> Enabled Sf2 logging system"
touch /app/www/app/logs/prod.log /app/www/app/logs/dev.log
tail -F -n 0 /app/www/app/logs/prod.log &
tail -F -n 0 /app/www/app/logs/dev.log &

echo "--> Enabled Nginx logging system"
touch /app/vendor/nginx/logs/access.log /app/vendor/nginx/logs/error.log
mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
tail -F -n 0 /app/vendor/nginx/logs/access.log &
tail -F -n 0 /app/vendor/nginx/logs/error.log &

echo "--> Enabled PHP-FPM logging system"
mkdir /app/vendor/php/log/
touch /app/vendor/php/log/php-fpm.log
tail -F -n 0 /app/vendor/php/log/php-fpm.log &

echo "--> Booting PHP-FPM & Nginx"
php-fpm
nginx

# Done after booting nginx to see if it avoids the timeout on boot
echo "--> Warming up the cache"
/app/sf cache:warmup ${SF_DEBUG} --env=${SF_ENV} --no-interaction

echo "--> Done!"
EOF
chmod +x boot.sh
# ----END BOOT SCRIPT------------------------------------------------------

echo "-----> Slug compilation ends with success!"
